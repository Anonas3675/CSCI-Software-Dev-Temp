<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Buff Games - GeoGuess</title>

  <!-- Styles -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

   <link rel="stylesheet" href="css/geoguessr.css">

</head>

<body>
  <div class="bg-container"></div>

  <h1>GeoGuess</h1>

   <div class="content-wrapper">
    <!-- Panorama Viewer -->
    <div id="viewer-container">
      <div id="viewer"></div>
    </div>

    <!-- Map Guess Section -->
    <div id="map-section">
      <h2>Click the location on the CU Campus Map</h2>
      <div id="map-container">
        <img id="campus-map" src="../img/cu-campus-map.jpg" alt="CU Campus Map" />
      </div>
      <p id="coords-display" class="mt-3" style="font-size: 18px; font-weight: 500;"></p>
      <div style="margin-top: 20px;">
        <div class="button-container">
  <button id="confirm-guess-btn" class="btn-buff">Confirm Guess</button>
  <button id="back-btn" class="btn-buff">Back to Panorama</button>
</div>
<p id="result" class="mt-3"></p>
      </div>
    </div>
  </div>

  <!-- Import Map for Modules -->
  <script type="importmap">
    {
      "imports": {
        "three": "https://cdn.jsdelivr.net/npm/three/build/three.module.js",
        "@photo-sphere-viewer/core": "https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.module.js"
      }
    }
  </script>

  <!-- Main Script -->
  <script type="module">
    import { Viewer } from '@photo-sphere-viewer/core';

    const location = {{{json location}}};

    const MAP_BOUNDS = {
      minLat: 40.005,
      maxLat: 40.010,
      minLon: -105.270,
      maxLon: -105.260
    };

    function haversineDistance(lat1, lon1, lat2, lon2) {
      const R = 6371;
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat / 2) ** 2 +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) ** 2;
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    //let currentLocation = location[Math.floor(Math.random() * location.length)];
    //fixed shuffle?
    let gameLocations = shuffleArray([...location]);
    let roundLocations = gameLocations.slice(0, 3);
    let currentLocation = roundLocations[0];

    const viewer = new Viewer({
      container: document.querySelector('#viewer'),
      panorama: `../img/${currentLocation.file}`,
      navbar: [
        {
          id: 'guess',
          title: 'Make a Guess',
          content: 'üìç Make a Guess',
          className: 'custom-guess-btn',
          onClick: () => {
            document.getElementById('map-section').style.display = 'block';
            document.getElementById('back-btn').style.display = 'inline-block';
          }
        },
        'zoom',
        'move',
        'caption',
        'fullscreen'
      ]
    });

    

    const mapSection = document.getElementById('map-section');
    const backBtn = document.getElementById('back-btn');
    const resultEl = document.getElementById('result');

    backBtn.addEventListener('click', () => {
      mapSection.style.display = 'none';
      backBtn.style.display = 'none';
      resultEl.innerText = '';
    });

    let currentRound = 0;
    var guessedLoc = [];

    let pinElement = null;
    let selectedLon = null;
    let selectedLat = null;
   
    document.getElementById('campus-map').addEventListener('click', function (event) {
      const rect = this.getBoundingClientRect();
      const clickX = event.clientX - rect.left;
      const clickY = event.clientY - rect.top;
      const xPercent = (clickX / rect.width) * 100;
      const yPercent = (clickY / rect.height) * 100;
      const xRatio = clickX / rect.width;
      const yRatio = clickY / rect.height;
      const clickedLat = MAP_BOUNDS.maxLat - yRatio * (MAP_BOUNDS.maxLat - MAP_BOUNDS.minLat);
      const clickedLon = MAP_BOUNDS.minLon + xRatio * (MAP_BOUNDS.maxLon - MAP_BOUNDS.minLon);
      
      window.selectedLat = clickedLat;
      window.selectedLon = clickedLon;
      
      if (pinElement) pinElement.remove();
      
      pinElement = document.createElement('img');
      pinElement.src = '../img/pin.jpg';
      pinElement.style.position = 'absolute';
      pinElement.style.left = `${clickX}px`;
      pinElement.style.top = `${clickY}px`;
      pinElement.style.width = '35px';
      pinElement.style.height = '25px';
      pinElement.style.transform = 'translate(1450%, -58%)';
      pinElement.style.zIndex = '1000';

      // remove later 
      {{!-- document.getElementById('coords-display').innerText = 
      `üìç Selected Location: Lat ${clickedLat.toFixed(6)}, Lon ${clickedLon.toFixed(6)}`; --}}

      
      document.getElementById('map-container').appendChild(pinElement);
    });

    let isButtonCooldown = false;

    document.getElementById('confirm-guess-btn').addEventListener('click', function () {
      if (window.selectedLat === undefined || window.selectedLon === undefined) {
        alert('Please select a location on the map first!');
        return;
      }


          // Add Correct Location Pin
        const mapImg = document.getElementById('campus-map');
        const rect = mapImg.getBoundingClientRect();

        const xRatioCorrect = (currentLocation.lon - MAP_BOUNDS.minLon) / (MAP_BOUNDS.maxLon - MAP_BOUNDS.minLon);
        const yRatioCorrect = (MAP_BOUNDS.maxLat - currentLocation.lat) / (MAP_BOUNDS.maxLat - MAP_BOUNDS.minLat);

        const correctX = rect.width * xRatioCorrect;
        const correctY = rect.height * yRatioCorrect;

        if (window.correctPin) window.correctPin.remove();

        const correctPin = document.createElement('img');
        correctPin.src = '../img/correctlocation.jpg';
        correctPin.style.position = 'absolute';
        correctPin.style.left = `${correctX}px`;
        correctPin.style.top = `${correctY}px`;
        correctPin.style.width = '32px';
        correctPin.style.height = '35px';
        correctPin.style.transform = 'translate(1600%, -70%)';
        correctPin.style.zIndex = '1000';

        document.getElementById('map-container').appendChild(correctPin);
        window.correctPin = correctPin;



      if (isButtonCooldown) return;

      this.disabled = true;
      this.innerHTML = 'Processing...';

      const distance = haversineDistance(
          window.selectedLat, 
          window.selectedLon, 
          currentLocation.lat, 
          currentLocation.lon
      );
      guessedLoc.push(parseFloat(distance.toFixed(2)));
      currentRound++;

      resultEl.style.display = 'block'; // Show the result box
      resultEl.innerText = `Round ${currentRound}: You were ${distance.toFixed(2)} km away.`;
      resultEl.style.color = distance < 0.1 ? "rgb(5, 109, 22)" : "red";

      if (currentRound < 3) {
        setTimeout(() => {
          resetRound();
        }, 2000);
      } else {
        endGame();
        setTimeout(() => {
          resetButtonState();
        }, 2000);
      }
    });

    function resetButtonState() {
      const confirmBtn = document.getElementById('confirm-guess-btn');
      confirmBtn.disabled = false;
      confirmBtn.innerHTML = 'Confirm Guess';
      isButtonCooldown = false;
    }

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

   

    function resetRound() {
      if (currentRound < 3) {
        resultEl.style.display = 'none'; // Hide it again when resetting
        resultEl.innerText = "";
        currentLocation = roundLocations[currentRound];
       viewer.setPanorama(`../img/${currentLocation.file}`);
        mapSection.style.display = 'none';
        backBtn.style.display = 'none';
        resultEl.innerText = "";
        resetButtonState();
        if (pinElement) {
          pinElement.remove();
          pinElement = null;
        }

        if (window.correctPin) {
          window.correctPin.remove();
          window.correctPin = null;
        } 
      }
    }

    function endGame() {
      const totalDistance = guessedLoc.reduce((acc, val) => acc + val, 0).toFixed(2);
      resultEl.innerText = `üéâ Game over! Total distance: ${totalDistance} km`;
      
      const confirmBtn = document.getElementById('confirm-guess-btn');
      confirmBtn.style.display = 'none';

      const playAgainBtn = document.createElement('button');
      playAgainBtn.classList.add('btn-buff');
      playAgainBtn.innerText = 'Play Again';
      playAgainBtn.addEventListener('click', function() {
        currentRound = 0;
        guessedLoc = [];
        gameLocations = shuffleArray([...location]);
        roundLocations = gameLocations.slice(0, 3);
        resetRound();
        this.remove();
        resultEl.innerText = '';
        confirmBtn.style.display = 'inline-block';
      });
      
      if(playAgainBtn) playAgainBtn.remove();
      resultEl.parentNode.insertBefore(playAgainBtn, resultEl.nextSibling);
      
      fetch('/saveScore', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ totalDistance })
      })
      .then(response => response.json())
      .then(data => console.log('Score saved:', data))
      .catch(error => console.error('Error saving:', error));
    }
  </script>
</body>
</html>