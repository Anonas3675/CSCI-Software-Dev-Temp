<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>GeoGuess</title>

  <!-- Styles -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.min.css" />

  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow-x: hidden;
    }

    #viewer {
      width: 100vw;
      height: 70vh;
    }

    #map-section {
      display: none;
    }

    #map-container {
      max-height: 60vh;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      position:relative
    }

    #campus-map {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      cursor: crosshair;
    }

    #back-btn {
      display: none;
      margin-top: 10px;
    }

    .psv-navbar {
      justify-content: center !important;
    }

    .psv-navbar-button.custom-guess-btn {
      font-size: 1.25rem;
      padding: 8px 16px;
      border-radius: 8px;
      background-color: #0d6efd;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto;
      transition: background-color 0.3s;
      font-weight: 500;
    }

    .psv-navbar-button.custom-guess-btn:hover {
      background-color: #0b5ed7;
    }
  </style>
</head>
<body>

<!-- Panorama Viewer -->
<div id="viewer"></div>



<!-- Map Guess Section -->
<div id="map-section" class="container text-center mt-4">
  <h2>Click the location on the CU Campus Map</h2>
  <div id="map-container" style="position: relative; width: 100%; max-width: 1000px; margin: 0 auto; max-height: 60vh; overflow: hidden;">
    <img id="campus-map" src="img/cu-campus-map.jpg" alt="CU Campus Map" style="width: 100%; height: auto; max-height: 55vh; object-fit: contain; display: block;" /> 
  </div>
  <div style="margin-top: 20px; padding-top: 10px;">
    <button id="confirm-guess-btn" class="btn btn-primary mt-3">Confirm Guess</button>
    <p id="result" class="mt-3 fw-bold"></p>
    <button id="back-btn" class="btn btn-secondary">Back to Panorama</button>
  </div>
</div>


<!-- Import Map for Modules -->
<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three/build/three.module.js",
      "@photo-sphere-viewer/core": "https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.module.js"
    }
  }
</script>

<!-- Main Script -->
<script type="module">
  import { Viewer } from '@photo-sphere-viewer/core';

  const location = {{{json location}}};

  const MAP_BOUNDS = {
    minLat: 40.005,
    maxLat: 40.010,
    minLon: -105.270,
    maxLon: -105.260
  };

  function haversineDistance(lat1, lon1, lat2, lon2) {
    const R = 6371;
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) ** 2 +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon / 2) ** 2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }

  let currentLocation = location[Math.floor(Math.random() * location.length)];

  const viewer = new Viewer({
    container: document.querySelector('#viewer'),
    panorama: `img/${currentLocation.file}`,
    navbar: [
      {
        id: 'guess',
        title: 'Make a Guess',
        content: '📍 Make a Guess',
        className: 'custom-guess-btn',
        onClick: () => {
          document.getElementById('map-section').style.display = 'block';
          document.getElementById('back-btn').style.display = 'inline-block';
        }
      },
      'zoom',
      'move',
      'caption',
      'fullscreen'
    ]
  });

  const mapSection = document.getElementById('map-section');
  const backBtn = document.getElementById('back-btn');
  const resultEl = document.getElementById('result');

  backBtn.addEventListener('click', () => {
    mapSection.style.display = 'none';
    backBtn.style.display = 'none';
    resultEl.innerText = '';
  });

  let currentRound = 0;
  var guessedLoc = [];

  let pinElement = null;
  let selectedLon = null;
  let selectedLat = null;
 

  document.getElementById('campus-map').addEventListener('click', function (event) {
    // Get exact position relative to the map image
    const rect = this.getBoundingClientRect();
    
    // Calculate click position relative to the image element
    const clickX = event.clientX - rect.left;
    const clickY = event.clientY - rect.top;
    
    // Calculate percentage position within the image (this is zoom-independent)
    const xPercent = (clickX / rect.width) * 100;
    const yPercent = (clickY / rect.height) * 100;
    
    // Calculate the ratio for lat/lon conversion
    const xRatio = clickX / rect.width;
    const yRatio = clickY / rect.height;
    
    // Convert click position to lat/lon coordinates
    const clickedLat = MAP_BOUNDS.maxLat - yRatio * (MAP_BOUNDS.maxLat - MAP_BOUNDS.minLat);
    const clickedLon = MAP_BOUNDS.minLon + xRatio * (MAP_BOUNDS.maxLon - MAP_BOUNDS.minLon);
    
    window.selectedLat = clickedLat;
    window.selectedLon = clickedLon;
    
    // Remove existing pin if present
    if (pinElement) pinElement.remove();
    
    // Create new pin that uses percentages for positioning
    pinElement = document.createElement('img');
    pinElement.src = 'img/pin.jpg';
    pinElement.style.position = 'absolute';
    pinElement.style.left = `${xPercent}%`; // Use percentage instead of pixels
    pinElement.style.top = `${yPercent}%`;  // Use percentage instead of pixels
    pinElement.style.width = '35px';
    pinElement.style.height = '25px';
    pinElement.style.transform = 'translate(-50%, -100%)'; // Position the bottom tip at the click point
    pinElement.style.zIndex = '1000';
    
    document.getElementById('map-container').appendChild(pinElement);
    
    // Show clicked coords for debugging (also using percentage positioning)
    //const coordsDisplay = document.createElement('div');
    // coordsDisplay.className = 'clicked-coords';
    //coordsDisplay.style.position = 'absolute';
    //coordsDisplay.style.left = `${xPercent}%`;
    //coordsDisplay.style.top = `${yPercent}%`;
    //coordsDisplay.style.backgroundColor = 'rgba(0,0,0,0.7)';
    //coordsDisplay.style.color = 'white';
   // coordsDisplay.style.padding = '5px';
    //coordsDisplay.style.borderRadius = '3px';
    //coordsDisplay.style.fontSize = '12px';
    //coordsDisplay.style.transform = 'translate(-50%, -200%)'; // position above pin
    //coordsDisplay.style.zIndex = '1001';
    //coordsDisplay.innerText = `Lat: ${clickedLat.toFixed(6)}, Lon: ${clickedLon.toFixed(6)}`;// --}}
    
    // Remove previous coord displays
    //const existingCoords = document.querySelectorAll('.clicked-coords');
    //existingCoords.forEach(el => el.remove());
    
   // document.getElementById('map-container').appendChild(coordsDisplay);
});


  let isButtonCooldown = false;

  document.getElementById('confirm-guess-btn').addEventListener('click', function () {
    if (window.selectedLat === undefined || window.selectedLon === undefined) {
      alert('Please select a location on the map first!');
      return;
    }

    if (isButtonCooldown) {
    return;
    }

    this.disabled = true;
    this.classList.add('disabled');
    this.innerHTML = 'Processing...';


    const distance = haversineDistance(
        window.selectedLat, 
        window.selectedLon, 
        currentLocation.lat, 
        currentLocation.lon
    );
    guessedLoc.push(parseFloat(distance.toFixed(2)));
    currentRound++;

    resultEl.innerText = `Round ${currentRound}: You were ${distance.toFixed(2)} km away.`;
    resultEl.style.color = distance < 0.1 ? "green" : "red";


    if (currentRound < 3) {
      setTimeout(() => {
        resetRound();
      }, 2000);
    } else {
      endGame();

      setTimeout(() => {
      resetButtonState();
    }, 2000);
    }
  });

  function resetButtonState() {
  const confirmBtn = document.getElementById('confirm-guess-btn');
  confirmBtn.disabled = false;
  confirmBtn.classList.remove('disabled');
  confirmBtn.innerHTML = 'Confirm Guess';
  isButtonCooldown = false;
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];  // Swap elements
  }
  return array;
}

let gameLocations = shuffleArray([...location]); // Copy and shuffle locations
let roundLocations = gameLocations.slice(0, 3);  // Get the first 3 unique locations


function resetRound() {
  if (currentRound < 3) {
    currentLocation = roundLocations[currentRound];  // Get location from the shuffled array
    viewer.setPanorama(`img/${currentLocation.file}`);
    mapSection.style.display = 'none';
    backBtn.style.display = 'none';
    resultEl.innerText = "";
    resetButtonState();
    if (pinElement) {
      pinElement.remove();
      pinElement = null;
    }
  }
}






function endGame() {
  const totalDistance = guessedLoc.reduce((acc, val) => acc + val, 0).toFixed(2);
  resultEl.innerText = `\n🎉 Game over! Total distance: ${totalDistance} km`;
  

  const confirmBtn = document.getElementById('confirm-guess-btn');
  confirmBtn.style.display = 'none'; // Or use confirmBtn.remove(); to remove it entirely
  confirmBtn.disabled = true;


  // Create Play Again button
  const playAgainBtn = document.createElement('button');
  playAgainBtn.classList.add('btn', 'btn-success', 'mt-3', 'mx-2');
  playAgainBtn.innerText = 'Play Again';
  playAgainBtn.addEventListener('click', function() {
    currentRound = 0;
    guessedLoc = [];
    gameLocations = shuffleArray([...location]);
    roundLocations = gameLocations.slice(0, 3);  // Pick the first 3 locations
    resetRound();
    this.remove(); // Remove the play again button
    resultEl.innerText = '';
    confirmBtn.style.display = 'inline-block'; // shows the button again
  });
  

    // Append the button after the result text
  if(playAgainBtn) playAgainBtn.remove();
  resultEl.parentNode.insertBefore(playAgainBtn, resultEl.nextSibling);
  
  // Save score
  fetch('/saveScore', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ totalDistance })
  })
  .then(response => response.json())
  .then(data => console.log('Score saved:', data))
  .catch(error => console.error('Error saving:', error));
}

</script>

</body>
</html>
