<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GeoGuess</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.min.css" />
</head>

<body>

<!-- Viewer for panorama -->
<div id="viewer" style="width: 100vw; height: 70vh;"></div>

<!-- Location Selection -->
<div class="container mt-4 text-center">
    <h2>Select the Correct Location</h2>
    <div class="row justify-content-center">
        {{#each locations}}
        <div class="col-md-3">
            <button class="btn btn-primary location-btn m-2" data-name="{{this.name}}" data-file="{{this.file}}">
                {{this.name}}
            </button>
        </div>
        {{/each}}
    </div>
    <p id="result" class="mt-3 fw-bold"></p>
</div>

<script type="importmap">
    {
        "imports": {
            "three": "https://cdn.jsdelivr.net/npm/three/build/three.module.js",
            "@photo-sphere-viewer/core": "https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.module.js"
        }
    }
</script>

<script type="module">
    import { Viewer } from '@photo-sphere-viewer/core';

    // Retrieve locations array from Handlebars
    const locations = {{{json locations}}};

    // Function to get a new random location (ensuring it's different)
    function getRandomLocation(excludeFile) {
        let newLocation;
        do {
            newLocation = locations[Math.floor(Math.random() * locations.length)];
        } while (newLocation.file === excludeFile); // Avoid selecting the same image
        return newLocation;
    }

    // Select a random location for the first image
    let currentLocation = getRandomLocation(null);
    let currentImage = currentLocation.file;

    // Initialize Photo Sphere Viewer with the random image
    const viewer = new Viewer({
        container: document.querySelector('#viewer'),
        panorama: `resources/${currentImage}`, 
        navbar: [
            'zoom', 'move', 'caption', 'fullscreen'
        ]
    });

    // Handle location selection
    document.querySelectorAll('.location-btn').forEach(button => {
        button.addEventListener('click', function () {
            let selectedName = this.getAttribute('data-name');
            let selectedFile = this.getAttribute('data-file');

            if (selectedFile === currentImage) {
                document.getElementById('result').innerText = `✅ Correct! It is ${selectedName}.`;
                document.getElementById('result').style.color = "green";

                // Change to a new random location
                setTimeout(() => {
                    currentLocation = getRandomLocation(currentImage);
                    currentImage = currentLocation.file;
                    viewer.setPanorama(`resources/${currentImage}`);
                    document.getElementById('result').innerText = ""; // Clear message after switching
                }, 1500); // Delay so user can see the "Correct" message
            } else {
                document.getElementById('result').innerText = `❌ Wrong! Try again.`;
                document.getElementById('result').style.color = "red";
            }
        });
    });

</script>

</body>
</html>
