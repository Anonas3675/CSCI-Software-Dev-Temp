<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Buff Games - GeoGuess</title>

  <!-- Styles -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <style>
    @font-face {
      font-family: 'Pixelify Sans';
      src: url('../fonts/PixelifySans-Regular.ttf') format('truetype');
      font-weight: normal;
      font-style: normal;
    }

    @font-face {
      font-family: 'Pixelify Sans';
      src: url('../fonts/PixelifySans-Medium.ttf') format('truetype');
      font-weight: 500;
      font-style: normal;
    }

    @font-face {
      font-family: 'Pixelify Sans';
      src: url('../fonts/PixelifySans-Bold.ttf') format('truetype');
      font-weight: bold;
      font-style: normal;
    }

    .bg-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: url('../img/homeBackdrop.jpg');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      opacity: 0.6; 
      z-index: -1;
    }

    body {
      font-family: 'Pixelify Sans';
      text-align: center;
      margin: 0;
      padding: 0;
    }

    /* Navigation Bar - Consistent with Buff Games */
    
    
    .custom-btn {
      background-color: rgb(209, 186, 129) !important;
      color: black !important;
      font-weight: 500;
    }

    /* Viewer Container */
    #viewer {
      width: 100vw;
      height: 60vh;
      margin-top: 20px;
    }

    /* Content Wrapper - Consistent with Buff Games */
    .content-wrapper {
      background-color: rgba(0, 0, 0, 0.7);
      border-radius: 30px;
      padding: 30px;
      margin: 20px auto;
      max-width: 95%;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
    }

    /* Map Section */
    #map-section {
      display: none;
    }

    #map-container {
      max-height: 50vh;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      position: relative;
      margin: 0 auto;
      background-color: rgba(209, 186, 129, 0.2);
      border-radius: 20px;
      padding: 10px;
    }

    #campus-map {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      cursor: crosshair;
      border-radius: 15px;
    }

    /* Buttons - Consistent with Buff Games */
    .btn-buff {
      background: rgb(209, 186, 129);
      border-radius: 20px;
      padding: 12px 24px;
      font-size: 20px;
      font-weight: 500;
      color: black;
      border: none;
      transition: transform 0.2s ease;
      margin: 10px;
    }
    
    .btn-buff:hover {
      transform: scale(1.05);
      color: rgb(5, 109, 22);
    }

    /* Viewer Controls */
    

    

    
    /* Headers */
    h1, h2, h3 {
      font-weight: bold;
      color: #333;
    }
    
    h1 { font-size: 48px; margin: 20px 0; }
    h2 { font-size: 36px; margin: 15px 0; }

    /* Result Text */
    #result {
      font-size: 24px;
      margin: 15px 0;
      padding: 10px;
      background-color: rgba(209, 186, 129, 0.3);
      border-radius: 10px;
    }

    @media (max-width: 768px) {
      h1 { font-size: 36px; }
      h2 { font-size: 28px; }
      
      #viewer {
        height: 50vh;
      }
      
      .content-wrapper {
        padding: 20px;
      }
    }
  </style>
</head>

<body>
  <div class="bg-container"></div>

  <h1>GeoGuess</h1>

  <div class="content-wrapper">
    <!-- Panorama Viewer -->
    <div id="viewer-container"></div>
    <div id="viewer"></div>

    <!-- Map Guess Section -->
    <div id="map-section">
      <h2>Click the location on the CU Campus Map</h2>
      <div id="map-container">
        <img id="campus-map" src="../img/cu-campus-map.jpg" alt="CU Campus Map" />
      </div>
      <div style="margin-top: 20px;">
        <button id="confirm-guess-btn" class="btn-buff">Confirm Guess</button>
        <p id="result" class="mt-3"></p>
        <button id="back-btn" class="btn-buff">Back to Panorama</button>
      </div>
    </div>
  </div>

  <!-- Import Map for Modules -->
  <script type="importmap">
    {
      "imports": {
        "three": "https://cdn.jsdelivr.net/npm/three/build/three.module.js",
        "@photo-sphere-viewer/core": "https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.module.js"
      }
    }
  </script>

  <!-- Main Script -->
  <script type="module">
    import { Viewer } from '@photo-sphere-viewer/core';

    const location = {{{json location}}};

    const MAP_BOUNDS = {
      minLat: 40.005,
      maxLat: 40.010,
      minLon: -105.270,
      maxLon: -105.260
    };

    function haversineDistance(lat1, lon1, lat2, lon2) {
      const R = 6371;
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat / 2) ** 2 +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) ** 2;
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    let currentLocation = location[Math.floor(Math.random() * location.length)];

    const viewer = new Viewer({
      container: document.querySelector('#viewer'),
      panorama: `../img/${currentLocation.file}`,
      navbar: [
        {
          id: 'guess',
          title: 'Make a Guess',
          content: '📍 Make a Guess',
          className: 'custom-guess-btn',
          onClick: () => {
            document.getElementById('map-section').style.display = 'block';
            document.getElementById('back-btn').style.display = 'inline-block';
          }
        },
        'zoom',
        'move',
        'caption',
        'fullscreen'
      ]
    });

    const mapSection = document.getElementById('map-section');
    const backBtn = document.getElementById('back-btn');
    const resultEl = document.getElementById('result');

    backBtn.addEventListener('click', () => {
      mapSection.style.display = 'none';
      backBtn.style.display = 'none';
      resultEl.innerText = '';
    });

    let currentRound = 0;
    var guessedLoc = [];

    let pinElement = null;
    let selectedLon = null;
    let selectedLat = null;
   
    document.getElementById('campus-map').addEventListener('click', function (event) {
      const rect = this.getBoundingClientRect();
      const clickX = event.clientX - rect.left;
      const clickY = event.clientY - rect.top;
      const xPercent = (clickX / rect.width) * 100;
      const yPercent = (clickY / rect.height) * 100;
      const xRatio = clickX / rect.width;
      const yRatio = clickY / rect.height;
      const clickedLat = MAP_BOUNDS.maxLat - yRatio * (MAP_BOUNDS.maxLat - MAP_BOUNDS.minLat);
      const clickedLon = MAP_BOUNDS.minLon + xRatio * (MAP_BOUNDS.maxLon - MAP_BOUNDS.minLon);
      
      window.selectedLat = clickedLat;
      window.selectedLon = clickedLon;
      
      if (pinElement) pinElement.remove();
      
      pinElement = document.createElement('img');
      pinElement.src = '../img/pin.jpg';
      pinElement.style.position = 'absolute';
      pinElement.style.left = `${xPercent}%`;
      pinElement.style.top = `${yPercent}%`;
      pinElement.style.width = '35px';
      pinElement.style.height = '25px';
      pinElement.style.transform = 'translate(-50%, -100%)';
      pinElement.style.zIndex = '1000';
      
      document.getElementById('map-container').appendChild(pinElement);
    });

    let isButtonCooldown = false;

    document.getElementById('confirm-guess-btn').addEventListener('click', function () {
      if (window.selectedLat === undefined || window.selectedLon === undefined) {
        alert('Please select a location on the map first!');
        return;
      }

      if (isButtonCooldown) return;

      this.disabled = true;
      this.innerHTML = 'Processing...';

      const distance = haversineDistance(
          window.selectedLat, 
          window.selectedLon, 
          currentLocation.lat, 
          currentLocation.lon
      );
      guessedLoc.push(parseFloat(distance.toFixed(2)));
      currentRound++;

      resultEl.innerText = `Round ${currentRound}: You were ${distance.toFixed(2)} km away.`;
      resultEl.style.color = distance < 0.1 ? "rgb(5, 109, 22)" : "red";

      if (currentRound < 3) {
        setTimeout(() => {
          resetRound();
        }, 2000);
      } else {
        endGame();
        setTimeout(() => {
          resetButtonState();
        }, 2000);
      }
    });

    function resetButtonState() {
      const confirmBtn = document.getElementById('confirm-guess-btn');
      confirmBtn.disabled = false;
      confirmBtn.innerHTML = 'Confirm Guess';
      isButtonCooldown = false;
    }

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    let gameLocations = shuffleArray([...location]);
    let roundLocations = gameLocations.slice(0, 3);

    function resetRound() {
      if (currentRound < 3) {
        currentLocation = roundLocations[currentRound];
        viewer.setPanorama(`../img/${currentLocation.file}`);
        mapSection.style.display = 'none';
        backBtn.style.display = 'none';
        resultEl.innerText = "";
        resetButtonState();
        if (pinElement) {
          pinElement.remove();
          pinElement = null;
        }
      }
    }

    function endGame() {
      const totalDistance = guessedLoc.reduce((acc, val) => acc + val, 0).toFixed(2);
      resultEl.innerText = `🎉 Game over! Total distance: ${totalDistance} km`;
      
      const confirmBtn = document.getElementById('confirm-guess-btn');
      confirmBtn.style.display = 'none';

      const playAgainBtn = document.createElement('button');
      playAgainBtn.classList.add('btn-buff');
      playAgainBtn.innerText = 'Play Again';
      playAgainBtn.addEventListener('click', function() {
        currentRound = 0;
        guessedLoc = [];
        gameLocations = shuffleArray([...location]);
        roundLocations = gameLocations.slice(0, 3);
        resetRound();
        this.remove();
        resultEl.innerText = '';
        confirmBtn.style.display = 'inline-block';
      });
      
      if(playAgainBtn) playAgainBtn.remove();
      resultEl.parentNode.insertBefore(playAgainBtn, resultEl.nextSibling);
      
      fetch('/saveScore', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ totalDistance })
      })
      .then(response => response.json())
      .then(data => console.log('Score saved:', data))
      .catch(error => console.error('Error saving:', error));
    }
  </script>
</body>
</html>