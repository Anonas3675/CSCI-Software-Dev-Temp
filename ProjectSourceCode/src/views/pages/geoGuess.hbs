<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>GeoGuess</title>

  <!-- Styles -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.min.css" />

  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow-x: hidden;
    }

    #viewer {
      width: 100vw;
      height: 70vh;
    }

    #map-section {
      display: none;
    }

    #map-container {
      max-height: 60vh;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }

    #campus-map {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      cursor: crosshair;
    }

    #back-btn {
      display: none;
      margin-top: 10px;
    }

    /* Custom guess button styling */
    .psv-navbar {
      justify-content: center !important;
    }

    .psv-navbar-button.custom-guess-btn {
      font-size: 1.25rem;
      padding: 8px 16px;
      border-radius: 8px;
      background-color: #0d6efd;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto;
      transition: background-color 0.3s;
      font-weight: 500;
    }

    .psv-navbar-button.custom-guess-btn:hover {
      background-color: #0b5ed7;
    }
  </style>
</head>
<body>

<!-- Panorama Viewer -->
<div id="viewer"></div>

<!-- Map Guess Section -->
<div id="map-section" class="container text-center mt-4">
  <h2>Click the location on the CU Campus Map</h2>
  <div id="map-container">
    <img id="campus-map" src="/resources/cu-campus-map.jpg" alt="CU Campus Map" /> 
  </div>
  <p id="result" class="mt-3 fw-bold"></p>
  <button id="back-btn" class="btn btn-secondary">Back to Panorama</button>
</div>

<!-- Import Map for Modules -->
<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three/build/three.module.js",
      "@photo-sphere-viewer/core": "https://cdn.jsdelivr.net/npm/@photo-sphere-viewer/core/index.module.js"
    }
  }
</script>

<!-- Main Script -->
<script type="module">
  import { Viewer } from '@photo-sphere-viewer/core';

  // Provided dynamically by the server
  const locations = {{{json locations}}};

  // Adjust this based on your campus map image bounds
  const MAP_BOUNDS = {
    minLat: 40.005,
    maxLat: 40.010,
    minLon: -105.270,
    maxLon: -105.260
  };

  function haversineDistance(lat1, lon1, lat2, lon2) {
    const R = 6371;
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) ** 2 +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon / 2) ** 2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }

  let currentLocation = locations[Math.floor(Math.random() * locations.length)];

  const viewer = new Viewer({
    container: document.querySelector('#viewer'),
    panorama: `/resources/${currentLocation.file}`,
    navbar: [
      {
        id: 'guess',
        title: 'Make a Guess',
        content: '📍 Make a Guess',
        className: 'custom-guess-btn',
        onClick: () => {
          document.getElementById('map-section').style.display = 'block';
          document.getElementById('back-btn').style.display = 'inline-block';
        }
      },
      'zoom',
      'move',
      'caption',
      'fullscreen'
    ]
  });

  const mapSection = document.getElementById('map-section');
  const backBtn = document.getElementById('back-btn');
  const resultEl = document.getElementById('result');

  backBtn.addEventListener('click', () => {
    mapSection.style.display = 'none';
    backBtn.style.display = 'none';
    resultEl.innerText = '';
  });

  document.getElementById('campus-map').addEventListener('click', function (event) {
    const rect = this.getBoundingClientRect();
    const clickX = event.clientX - rect.left;
    const clickY = event.clientY - rect.top;

    const xRatio = clickX / this.width;
    const yRatio = clickY / this.height;

    const clickedLat = MAP_BOUNDS.maxLat - yRatio * (MAP_BOUNDS.maxLat - MAP_BOUNDS.minLat);
    const clickedLon = MAP_BOUNDS.minLon + xRatio * (MAP_BOUNDS.maxLon - MAP_BOUNDS.minLon);

    //ADDED TO SHOW WHERE USER CLICKED FOR TROUBLE SHOOTING <=====>
    const coordsDisplay = document.createElement('div');
    coordsDisplay.className = 'clicked-coords';
    coordsDisplay.style.position = 'absolute';
    coordsDisplay.style.left = `${clickX}px`;
    coordsDisplay.style.top = `${clickY}px`;
    coordsDisplay.style.backgroundColor = 'rgba(0,0,0,0.7)';
    coordsDisplay.style.color = 'white';
    coordsDisplay.style.padding = '5px';
    coordsDisplay.style.borderRadius = '3px';
    coordsDisplay.style.fontSize = '12px';
    coordsDisplay.style.transform = 'translate(-50%, -100%)';
    coordsDisplay.style.marginTop = '-5px';
    coordsDisplay.style.zIndex = '1000';
    coordsDisplay.innerText = `Lat: ${clickedLat.toFixed(6)}, Lon: ${clickedLon.toFixed(6)}`;


    
    // Remove any existing coordinate displays
    const existingCoords = document.querySelectorAll('.clicked-coords');
    existingCoords.forEach(el => el.remove());
    
    // Add the new coordinate display
    this.parentNode.appendChild(coordsDisplay);
    //ADDED BY EVAN ^^^ <=====>


    const distance = haversineDistance(
      clickedLat, clickedLon,
      currentLocation.lat, currentLocation.lon
    );

    if (distance < 0.1) {
      resultEl.innerText = `✅ Correct! You were only ${distance.toFixed(2)} km away.`;
      resultEl.style.color = "green";

      setTimeout(() => {
        currentLocation = locations[Math.floor(Math.random() * locations.length)];
        viewer.setPanorama(`/resources/${currentLocation.file}`);
        mapSection.style.display = 'none';
        backBtn.style.display = 'none';
        resultEl.innerText = "";
      }, 2000);
    } else {
      resultEl.innerText = `❌ Not quite. You were ${distance.toFixed(2)} km away. Try again!`;
      resultEl.style.color = "red";
    }

    fetch('/save-location', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ lat: clickedLat, lon: clickedLon })
      })
      .then(response => response.json())
      .then(data => console.log('Saved:', data))
      .catch(error => console.error('Error:', error));
  });
</script>

</body>
</html>
